# Kubernetes manifests for WordPress Avada Salon
# Cloud-native deployment with ArgoCD Image Updater integration

---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: wp-avada-salon
  labels:
    app.kubernetes.io/name: wordpress
    app.kubernetes.io/instance: wp-avada-salon
    app.kubernetes.io/part-of: wp-cluster

---
# ConfigMap for WordPress Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: wp-config
  namespace: wp-avada-salon
data:
  wp-config.php: |
    <?php
    define('DB_NAME', getenv('WORDPRESS_DB_NAME'));
    define('DB_USER', getenv('WORDPRESS_DB_USER'));
    define('DB_PASSWORD', getenv('WORDPRESS_DB_PASSWORD'));
    define('DB_HOST', getenv('WORDPRESS_DB_HOST'));
    define('DB_CHARSET', 'utf8');
    define('DB_COLLATE', '');

    $table_prefix = 'wp_';
    define('WP_DEBUG', false);

    if ( ! defined( 'ABSPATH' ) ) {
        define( 'ABSPATH', __DIR__ . '/' );
    }

    require_once ABSPATH . 'wp-settings.php';

---
# Secret for Database Credentials
apiVersion: v1
kind: Secret
metadata:
  name: db-credentials
  namespace: wp-avada-salon
type: Opaque
stringData:
  mysql-root-password: "salon_root_password"
  mysql-password: "salon_wordpress_password"
  mysql-user: "wordpress"
  mysql-database: "wordpress"

---
# PersistentVolumeClaim for WordPress Content
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wp-content-pvc
  namespace: wp-avada-salon
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: longhorn
  resources:
    requests:
      storage: 10Gi

---
# PersistentVolumeClaim for Database
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wp-db-pvc
  namespace: wp-avada-salon
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: longhorn
  resources:
    requests:
      storage: 5Gi

---
# MySQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wp-avada-salon
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: mysql-database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: db-data
          mountPath: /var/lib/mysql
        resources:
          requests:
            memory: 512Mi
            cpu: 250m
          limits:
            memory: 1Gi
            cpu: 500m
      volumes:
      - name: db-data
        persistentVolumeClaim:
          claimName: wp-db-pvc

---
# MySQL Service
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wp-avada-salon
spec:
  selector:
    app: mysql
  ports:
  - port: 3306
    targetPort: 3306

---
# WordPress Deployment with ArgoCD Image Updater annotations
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wp-avada-salon
  annotations:
    # ArgoCD Image Updater configuration for CI/CD automation
    argocd-image-updater.argoproj.io/image-list: wordpress=git.xuperson.org/wp-avada-salon
    argocd-image-updater.argoproj.io/wordpress.update-strategy: latest
    argocd-image-updater.argoproj.io/wordpress.allow-tags: regexp:^main-.*
    argocd-image-updater.argoproj.io/write-back-method: git
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      initContainers:
      - name: wait-for-db
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z mysql 3306; do sleep 1; done']
      containers:
      - name: wordpress
        # This image will be automatically updated by ArgoCD Image Updater
        # Using standard WordPress image until custom image is built
        image: wordpress:6.4-php8.2-apache
        env:
        - name: WORDPRESS_DB_HOST
          value: "mysql:3306"
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: mysql-database
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wp-content
          mountPath: /var/www/html/wp-content
        - name: wp-config
          mountPath: /var/www/html/wp-config.php
          subPath: wp-config.php
        resources:
          requests:
            memory: 256Mi
            cpu: 100m
          limits:
            memory: 512Mi
            cpu: 250m
        livenessProbe:
          httpGet:
            path: /wp-admin/install.php
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /wp-admin/install.php
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: wp-content
        persistentVolumeClaim:
          claimName: wp-content-pvc
      - name: wp-config
        configMap:
          name: wp-config

---
# WordPress Service
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wp-avada-salon
spec:
  type: ClusterIP
  selector:
    app: wordpress
  ports:
  - port: 80
    targetPort: 80

---
# WordPress Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: wordpress-ingress
  namespace: wp-avada-salon
  annotations:
    external-dns.alpha.kubernetes.io/hostname: "wp-avada-salon.xuperson.org"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
spec:
  ingressClassName: nginx
  rules:
  - host: wp-avada-salon.xuperson.org
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: wordpress
            port:
              number: 80